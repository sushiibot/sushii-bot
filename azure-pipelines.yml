# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'Ubuntu 16.04'

steps:
- script: |
    curl -o rustup-init.sh https://sh.rustup.rs -sSf
    sh rustup-init.sh -y
  displayName: 'Install Rust'

- script: |
    sudo apt-get install libssl-dev=1.0.2g-1ubuntu4.13 libpq-dev -y --allow-downgrades
  displayName: 'Install Dependencies'

- script: |
    echo 'Agent ID $(Agent.Id)'
    echo 'Agent Name $(Agent.Name)'
    echo 'Agent MachineName $(Agent.MachineName)'
    echo 'Agent OS $(Agent.OS)'

    echo 'Build ID $(Build.BuildId)'
    echo 'Build Number $(Build.BuildNumber)'
  displayName: 'Print Info'

- script: |
    source $HOME/.cargo/env
    cargo build --release
  displayName: 'Build sushii'

- task: PublishBuildArtifacts@1
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    pathtoPublish: 'target/release/sushii'
    artifactName: 'sushii-$(Build.BuildNumber)-$(Agent.OS)'

- task: DownloadSecureFile@1
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    secureFile: key

- task: InstallSSHKey@0
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    hostName: sushii@azure
    sshPublicKey: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCwfoLf8ujLzJvKhZST1JlViWrzVGC/EDVqMhgIGvUDyYvaLxMKhE20pmKMCLZwiZQv2WMrTOX3DpVw3Kr9jVm8JOp0UKw+bT5l/sd9ZfziW4fzOMCv3vsC3XAXGLIVfpTm6GlhwrJMyVtgbfjCx+kDePe5lWVKdLMiYr/tpRzKpA3Nyd3U8OSn5WI48UEBDjeiXE4gYgODvWaOdNN3HmxSGgLMAWF5wNQaqP0W9MpmvtvHrn7uUZHsemK6GPJrtsasCLJgNU53B8v18+vBNE2HRzLP0s1GD6E2to05FjCy7n9aCn287WnDR8U571TyFzA+TWhPVfkJ8diIST2T7HwrXlmg9kob3EcmLobkpWaGqbLmTYPNd26/9dJBY4pX14cxziFdkYgNJz8TQ3ax0MWlEt9txfh28n4jBP+ZPbtvMR+TzNF6nhtaY5zHgztfEubB5M1AVDEnOjhjAT+9BwP2bwG+DEX3jN69N5JbyeObdoNUDziwIHJ9tsJHeKtMi4bRv72nRANEZ6DGFxHZR/KZNMn3U3UTnxZwyExTqK8oxCcl7z2dC1EaUgeEF0JJnzEtGTEs61kuaoVDcJzFVClBTGt8BS5j4SQYdtxoCvWedL/MqsnhHWR/J6bsmE2L7F71vGMI/daMzASwo6J7MXvvG2UY12hw+KsNkB31PFUZdQ== sushii@azure
    #sshPassphrase: # Optional
    sshKeySecureFile: $env:DOWNLOADSECUREFILE_SECUREFILEPATH

- task: CopyFilesOverSSH@0
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    sshEndpoint: $(ssh.endpoint)
    sourceFolder: 'target/release/'
    contents: 'sushii' 
    targetFolder: /home/tzuwy/discord/sushii/
    cleanTargetFolder: false
    overwrite: true
    failOnEmptySource: true
    #flattenFolders: false # Optional

- task: SSH@0
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    sshEndpoint: $(ssh.endpoint)
    runOptions: 'script' # Options: commands, script, inline
    #commands: # Required when runOptions == Commands
    scriptPath: deploy.sh # Required when runOptions == Script
    #inline: # Required when runOptions == Inline
    #args: # Optional
    failOnStdErr: true # Optional

- script: |
    curl -F "content=Build $(Build.BuildNumber) complete.  `-quit` to update." $(discord.webhook)
  displayName: 'Completion Notification'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
